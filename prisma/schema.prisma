generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AccessProfile {
  id   String @id @default(uuid())
  name String

  users Users[]

  @@map("tb_access_profile")
}

model Users {
  id                String        @id @default(uuid())
  name              String
  email             String
  password          String
  access_profile_id String
  accessProfile     AccessProfile @relation(fields: [access_profile_id], references: [id])
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  deleted_at        DateTime?

  @@map("tb_users")
}

model Truck {
  id            String    @id @default(uuid())
  model         String
  license_plate String
  year          String
  qtd_axle      Int
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  deleted_at    DateTime?

  routes Routes[]

  @@map("tb_trucks")
}

enum LoadsType {
  GRANEL
  FRIGORIFICO
  CARGA_VIVA
  CONTEINERES
  PERIGOSAS
  SECAS
  INDIVISIVEIS
  FRAGEIS
  VEICULOS
  MINERIOS

  @@map("enum_loads_types")
}

model Loads {
  id             String    @id @default(uuid())
  type_loads     LoadsType
  weight         Float
  width          Float
  height         Float
  origin_id      String
  origin         Location  @relation(fields: [origin_id], references: [id], name: "loadsOrigin")
  destination_id String    @unique
  destination    Location  @relation(fields: [destination_id], references: [id], name: "loadsDestination")
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  deleted_at     DateTime?

  loadsRoutes LoadsRoutes[]

  @@map("tb_loads")
}

model Location {
  id           String  @id @default(uuid())
  city         String
  zipcode      String
  state        String
  neighborhood String
  street       String
  number       String
  details      String?

  loads_origin       Loads[]  @relation("loadsOrigin")
  loads_destination  Loads?   @relation("loadsDestination")
  routes_origin      Routes[]  @relation("routesOrigin")
  routes_destination Routes?   @relation("routesDestination")
  pitstop            Pitstop[]
  statusRoute        StatusRoute[]

  @@map("tb_location")
}

model LoadsRoutes {
  load_id    String
  load       Loads    @relation(fields: [load_id], references: [id])
  route_id   String
  route      Routes   @relation(fields: [route_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@id([load_id, route_id])
}

model Routes {
  id             String    @id @default(uuid())
  truck_id       String
  truck          Truck     @relation(fields: [truck_id], references: [id])
  estimate       Float
  origin_id      String
  origin         Location  @relation(fields: [origin_id], references: [id], name: "routesOrigin")
  destination_id String    @unique
  destination    Location  @relation(fields: [destination_id], references: [id], name: "routesDestination")
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  deleted_at     DateTime?

  loadsRoutes LoadsRoutes[]
  pitstop     Pitstop[]
  statusRoute StatusRoute[]

  @@map("tb_routes")
}

model Pitstop {
  id           String    @id @default(uuid())
  route_id     String
  routes       Routes    @relation(fields: [route_id], references: [id])
  location_id  String
  location     Location  @relation(fields: [location_id], references: [id])
  time         DateTime
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  deleted_at   DateTime?

  @@map("tb_pitstops")
}

model StatusRoute {
  id           String   @id @default(uuid())
  route_id     String
  routes       Routes   @relation(fields: [route_id], references: [id])
  location_id  String
  location     Location @relation(fields: [location_id], references: [id])
  time         DateTime
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  deleted_at   DateTime?

  @@map("tb_status_routes")
}
